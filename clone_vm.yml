- name: Check if VM {{ vm_name }} already exists
  set_fact:
    vm_exists: "{{ vm_name in (qm_list.stdout_lines[1:] | map('split') | map('extract', 1) | list) }}"

- name: Skip if VM {{ vm_name }} already exists
  debug:
    msg: "VM {{ vm_name }} already exists. Skipping..."
  when: vm_exists

- name: Get next available VM ID
  set_fact:
    vm_id: >-
      {{
        (qm_list.stdout_lines[1:] 
         | map('split') 
         | map('extract', 0)   # get VM IDs as strings first
         | map('int')          # then convert to int
         | list
         | max + 1) if qm_list.stdout_lines | length > 1 else 100
      }}
  when: not vm_exists


- name: Clone VM from template
  command: >
    qm clone {{ template_name }} {{ vm_id }} --name {{ vm_name }}
  when: not vm_exists

- name: Set VM hardware
  command: >
    qm set {{ vm_id }} --memory {{ memory }} --cores {{ cores }}
  when: not vm_exists

- name: Resize disk
  command: >
    qm resize {{ vm_id }} scsi0 {{ disk_size }}
  when: not vm_exists

- name: Set cloud-init username and password
  command: >
    qm set {{ vm_id }} --ciuser {{ vm_user }} --cipassword '{{ vm_password }}'
  when: not vm_exists

- name: Show success message
  debug:
    msg: "VM {{ vm_name }} with ID {{ vm_id }} created successfully."
  when: not vm_exists

- name: Install Docker if selected
  ansible.builtin.shell: |
    apt-get update && apt-get install -y docker.io
  when:
    - not vm_exists
    - "'docker' in software_to_install"
    - os_type in ['ubuntu-22.04', 'debian-12']

- name: Install K3s if selected
  ansible.builtin.shell: |
    curl -sfL https://get.k3s.io | sh -
  when:
    - not vm_exists
    - "'k3s' in software_to_install"
    - os_type in ['ubuntu-22.04', 'debian-12']
